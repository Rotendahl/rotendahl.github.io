[
  {
    "objectID": "posts/start-page-generator/index.html",
    "href": "posts/start-page-generator/index.html",
    "title": "Overengineering a start page",
    "section": "",
    "text": "The default start page in my browser of choice (safari) suck. The page looks nice but does not sync between devices, and shows a lot of useless information. Figure 1 shows the safari start page. The “favorites” section is a copy of the links in my favorites bar, which are already visible in the browser. The “Shared with you” section is a list of links that my partner has shared with me, they are all old and was never relevant. I don’t use the reading list in safari, the entries are all read or added by mistake. The bottom row is the most useful part, as it allows me to access tabs from my iPad and iPhone, but the tab group feature in safari superseeds this feature.\n\nBad Safari start pageAwesome generated start page\n\n\n\n\n\nFigure 1: Safari’s bad startpage\n\n\n\n\n\n\n\nFigure 2: My Generated webpage"
  },
  {
    "objectID": "posts/start-page-generator/index.html#configuring-the-start-page",
    "href": "posts/start-page-generator/index.html#configuring-the-start-page",
    "title": "Overengineering a start page",
    "section": "2.1 Configuring the start page",
    "text": "2.1 Configuring the start page\nTo make the above html fit your taste requires:\n\nSetting your color theme in the variables.css file.\nAdding &lt;a&gt; tags with each site you want to include.\n\nThis last point is a bit tedious, but could be done in a few minutes, but that’s no fun."
  },
  {
    "objectID": "posts/start-page-generator/index.html#defining-the-favorite-sites-grammar.",
    "href": "posts/start-page-generator/index.html#defining-the-favorite-sites-grammar.",
    "title": "Overengineering a start page",
    "section": "3.1 Defining the favorite sites grammar.",
    "text": "3.1 Defining the favorite sites grammar.\nA favorite site consists of a url, a display name and a logo, the last two are optional. We could have used a format such as json or csv as the configuration file format, but instead we create our own format. Listing 1 shows an example of the format. The idea of the grammar is to have the non optional url in the center of a line, if there is a display name it precedes the url and points-&gt; to the url defining the favorite. A logo optionally succeeds the url and points back &lt;- to it.\n\nListing 1: Example grammar instance\nsome arbitrary text\n* youtube.com/feed/subscriptions &lt;- &lt;logo-url&gt;\n* Github.com\n* Data Science -&gt; towardsdatascience.com\n* Sentry.io\n* Azure DevOps -&gt; dev.azure.com &lt;- &lt;logo-url&gt;\n\nA links file can contain two types of text lines: comments and favorites. A comment is any line that does not start with a * and a favorite is any line that does. A favorite must have a url, but can optionally have a display name and a logo as specified above. The grammar for the favorite sites file can be seen in BNF in Listing 2.\n\nListing 2: The favorite sites grammar in BNF form\n  favorites ::= * &lt;favorite&gt; \\n &lt;favorites&gt; | ε\n  favorite ::= &lt;display-name&gt; -&gt; &lt;site&gt; | &lt;site&gt;\n  display-name ::= &lt;text&gt;\n  site ::= &lt;url&gt; | &lt;url&gt; &lt;- &lt;url&gt;\n  url ::= &lt;url-spec&gt;\n\nWhere &lt;text&gt; is any string of characters that does not contain -&gt; or &lt;- or newlines and &lt;url-spec&gt; is any valid url. The grammar follows the lexeme convention of parsing, where we allow arbitrary whitespace between tokens, and treat any lines not prefixed with a * as whitespace.\nThe grammar is non left recursive, non ambiguous requiring no precedence rules, the only downside of the grammar is that it requires lookahead for display names. When reading the lexeme following a * we don’t know if it is a display name or url until we observe a -&gt; or the lack of it. Since the display names are short this will not be a problem in practice1.\n\n3.1.1 Full grammer file"
  },
  {
    "objectID": "posts/start-page-generator/index.html#creating-the-project",
    "href": "posts/start-page-generator/index.html#creating-the-project",
    "title": "Overengineering a start page",
    "section": "3.2 Creating the project",
    "text": "3.2 Creating the project\nTo setup our haskell project we use cabal and initialize the project with\ncabal init\nThis will create a start-page-generator.cabal file along with lib and test folders.\nIn typical haskell fashion we start by creating the types we need for our parser/(template engine). The types can be seen below:\n\nNote that the logo type is a type alias for the url. The ParsedSite type has the optional display name and logo url via the maybe monad. Our template engine will map between the ParsedSite and Site types filling in the optional fields. For the display name we use the hostname of the url if no display name is present. A missing logo url is filled in with logo.clearbit.com//&lt;hostname&gt; which provides a logo for most sites.\n\n3.2.1 Testing\nBeing a functional langauge Haskell has many great testing libaries from simple unit testing to property based testing. For this project we use the BDD style hspec library. The tests are simple assertions that given the specific input the code produces the expected output."
  },
  {
    "objectID": "posts/start-page-generator/index.html#parsing-the-links-file",
    "href": "posts/start-page-generator/index.html#parsing-the-links-file",
    "title": "Overengineering a start page",
    "section": "3.3 Parsing the links file",
    "text": "3.3 Parsing the links file\nHaskell is excellent for writing parsers, instead of writing clunky regexes that are hard to read and maintain we use the parser combinator library: parsec.\nThe main idea behind parser combinators is that you build a parser for each part of the grammar and then combine them to build a parser for the entire grammar. For parsing a site we need to parse a ‘*’ character, an optional display name, followed by an url and an optional logo url. This gives us the parser\nparseSite :: Parser ParsedSite\nparseSite = do\n  _ &lt;- string \"*\"\n  whiteSpace\n  name &lt;- optionMaybe $ try parseDisplayName\n  url &lt;- parseUrl\n  logo &lt;- optionMaybe $ try parseLogo\n  return (name, url, logo)\nWhich is much easier to read than a regex. See the full parser below."
  },
  {
    "objectID": "posts/start-page-generator/index.html#generating-the-html",
    "href": "posts/start-page-generator/index.html#generating-the-html",
    "title": "Overengineering a start page",
    "section": "3.4 Generating the html",
    "text": "3.4 Generating the html\nTo map from the parsed we map from the parsed sites to the site type and replace the template tag in the html with the generated html."
  },
  {
    "objectID": "posts/start-page-generator/index.html#footnotes",
    "href": "posts/start-page-generator/index.html#footnotes",
    "title": "Overengineering a start page",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI’m not overengineering my grammer for my overengineered project.↩︎"
  },
  {
    "objectID": "posts/games-with-processing/games-with-processing.html#about-the-project",
    "href": "posts/games-with-processing/games-with-processing.html#about-the-project",
    "title": "Mobile first games in processing",
    "section": "1.1 About the project",
    "text": "1.1 About the project\nThe project was a freelance job for the university of Copenhagen’s School Service. It was part of a larger campaign called “Who controls your brain”, the campaign was directed at middle school children with the purpose of teaching them about their brains. These games were the digital part of the project and tasked them with various cognitive tasks.\n\n1.1.1 The choice of framework\nThe kids were invited to a series of events where they would play them. We did not expect them to be able to install apps on their phones (Parental controls etc.) which meant that the games had to be web based. From my work in Coding Pirates I knew about Processing which is a simple way to create interactive drawings. A quick look at the documentation for processing reveals its main strength, the functions are few and basic enough that the learning curve is almost nonexistent. As an example the following snippet creates small circles in different colors based on the position of the mouse.\nsetup = function(){\n    size(400, 400);\n    framerate(30);\n};\n\nbackground(0, 0, 0);\n\ndraw = function() {\n    fill(mouseX, mouseY, 0);\n    ellipse(mouseX, mouseY, 50, 50);\n};\nA programmer armed with the documentation can start building games at once and not focus on lengthy tutorials. The downside of processing is that it’s mainly made for educational purposes and interactive art. This gave the following problems:\n\nTouch events are not natively supported, procressing only supports mouse clicks and can’t handle multitouch. This was mitigated by using the position of the mouse, for each frame the mouse position is reset so a change in position indicates a click. This is\nIt’s hard to get it to work in a responsive manner.\nProcessing was originally implemented in java and the port is not web first, leading to bad errors.\nIt’s Hard to interact with the DOM.\n\nA way to get around some of these problems is to use this excellent extension which makes it responsive and mobile friendly.\n\n\n\n\n\n\nNote\n\n\n\nSince I built my project the javascript version of processing has gotten a successor p5 which solves these problems."
  },
  {
    "objectID": "posts/games-with-processing/games-with-processing.html#the-structure-of-a-game",
    "href": "posts/games-with-processing/games-with-processing.html#the-structure-of-a-game",
    "title": "Mobile first games in processing",
    "section": "1.2 The structure of a game",
    "text": "1.2 The structure of a game\nEach game starts with a html file that loads the framework and the css required to make it responsive, lastly it loads .pde files and creates a canvas\nThe next step is to load the images required using the preprocessing directive &gt; /* @pjs preload=\"image1.jpg\"; */\nUsing these directives it’s simple to create a loading screen and scale the images once they are loaded. The setup and draw functions are placed in the file code.pde which controls the game’s state and the core game logic. Each game has a file game.pde that contains the data structures and classes for each game.\n\n1.2.1 The memory game\n\n\n\n\n\nThis game task the player to remember an ever increasing sequence of tiles. In the first level the user is shown three tiles numbered from one to three. After the timer runs out the numbers are hidden and the player must remember their order.\nThe game was made to show that we can “trick” our mind into remembering more information by storing it efficiently. First the kids had to check how they performed when trying to remember the positions of each tile. Afterwards they instead were told to remember the path and notice how their performance increased.\n\nImplementation\nThe game’s logic starts with creating a grid of a tile class, which holds the position and value for each tile, it exposes methods for hiding/showing and drawing it self. The game randomly picks tiles corresponding to \\(levelNumber + 2\\) ranks them from \\([1,levelNumber]\\) and draws them.\nThe state loop in game.pde starts a timer and turns tiles when needed. When the player loses they are given the option of posting their score or trying again.\n\n\n\n1.2.2 The “tabel” game\n\n\n\n\n\nThis game presents the player with at table that keeps scrolling down, at the bottom of the screen is the current “task” for the bottom row. The task can be picking the sum of two numbers, picking a number \\(n\\) such that \\(3 \\mid n\\), etc. If the player fails a task the row goes red and one extra row will stay red for the rest of the game.\nThe goal of the game was to have the kids find a way of avoiding doing the actual computation and find a pattern that could solve the task, I.e \\(5 \\mid n\\) can be solved by finding a number that ends in 5 or 0.\n\nImplementation\nThe game creates 5 rows containing 6 instances of the tile class. The rows scroll down and when they hit the bottom of the screen they are moved to the top again. When a row is “reset” the numbers on the tile are changed so they continue the sequence from the row nearest the top that isn’t red. The non red row closets to the bottom is the active one that the current task should be performed on. If a task is completed the row turns blue and active row and current task is changed.\n\n\n\n1.2.3 The reaction game\n\n\n\n\n\nThis game tests the players reactions and ability to perform simple cognitive tasks. It was inspired by the Batak board\nThe player has to hit a specified number of nodes in the graph, before the time runs out."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rotendahls Blog",
    "section": "",
    "text": "Overengineering a start page\n\n\n\n\n\n\n\nfront-end\n\n\ncode\n\n\nhaskell\n\n\n\n\n\n\n\n\n\n\n\nMay 13, 2023\n\n\nBenjamin Rotendahl\n\n\n\n\n\n\n  \n\n\n\n\nMobile first games in processing\n\n\n\n\n\n\n\nfront-end\n\n\ncode\n\n\ngames\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2017\n\n\nBenjamin Rotendahl\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Benjamin Rotendahl",
    "section": "",
    "text": "Hi! I’m Benjamin, I love programming, math, and stupid jokes. My girlfriend and I live in Copenhagen with our daughter. When not working or spending time with my family, I spend some of my free time being part of Coding Pirates where we teach kids to code.\nMy main interests are in software development and machine learning.\n\n\nMasters in Computer Science | University of Copenhagen | Sep 2018 - December 2021\nBachelors in Computer Science | University of Copenhagen | Sep 2013 - June 2017"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Benjamin Rotendahl",
    "section": "",
    "text": "Masters in Computer Science | University of Copenhagen | Sep 2018 - December 2021\nBachelors in Computer Science | University of Copenhagen | Sep 2013 - June 2017"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Benjamin Rotendahl",
    "section": "Experience",
    "text": "Experience\n\nDeveloper at Monthio: 2021-Present\nWe build a platform consisting of microservices that together analyse transactions, debt records, etc. and bulids a budget used for credit scoring.\n\n\nStudent Data Scientist at Bolius: 2018-2021\nI worked on a variety projects related to machine learning and data science. From initial data collection to building machine learning models and serving them via AWS and preseting them in a React frontend. We created models that given an address would present the user with risks of flooding, Radon, etc. driven by our own models.\n\n\nBackend Developer at CMP: 2017-2018\nWe implemented backends for a variety of apps and websites. We worked with Elixir and the Phoenix framework\n\n\nTA at University of Copenhagen: Feb 2017 - July 2017\nI was a teaching assistant on course software development for computer science students at the university of Copenhagen. We thought them software design patterns, programming practices, working in C# and using CI/CD.\n\n\nStudent Assistant at Coding Pirates | (December 2015 - Jan 2017)\nI helped build a custom CRM for Coding Pirates the code is on github"
  },
  {
    "objectID": "about.html#volunteering-free-time-awards",
    "href": "about.html#volunteering-free-time-awards",
    "title": "Benjamin Rotendahl",
    "section": "Volunteering, free time, awards",
    "text": "Volunteering, free time, awards\n\nI received a dissemination award from the institute of computer science of Copenhagen.\nVice Chair of the Board of Coding Pirates Denmark (2019-2021):\nBoard of Coding Pirates Denmark (2017-2019):\nBoard of Coding Pirates Copenhagen (2016-2018):\nTutor and Student assistant at the University of Copenhagen (2015-2019):\nI have the blue belt in karate and will use it if you claim emacs is better than vim\n\n\nHuman Languages\n\nDanish (Native)\nEnglish (Fluent)\nGerman (Some)\n\n\n\nFavorite Programming Languages:\n\nPython\nC#\nHaskell\nElixir\nF#\nJulia"
  }
]