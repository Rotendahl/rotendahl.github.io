{"title":"Mobile first games in processing","markdown":{"yaml":{"title":"Mobile first games in processing","author":"Benjamin Rotendahl","date":"2017-07-13","date-modified":"2023-04-12","categories":["front-end","code","games"],"image":"https://github.com/Rotendahl/brainGames/raw/master/screenshot.png","titlegraphic":"https://github.com/Rotendahl/brainGames/raw/master/screenshot.png"},"headingText":"Introduction","containsRefs":false,"markdown":"\n![](https://github.com/Rotendahl/brainGames/raw/master/screenshot.png)\n\nThis post describes the implementation of three mobile-first web games created\nusing Processing, a simple tool for building interactive drawings. The games\nwere designed to be played on smartphones and were part of a larger campaign\ncalled \"Who Controls Your Brain,\" directed at middle school children to teach\nthem about the brain. The digital games were a part of this educational effort\nand tasked the children with various cognitive tasks. The project was paid for\nby the school service of the University of Copenhagen.\n\nThe games works best on smartphones and can be played here:\n[https://rotendahl.dk/brainGames/](https://rotendahl.dk/brainGames/) and\nthe code is on [github](https://github.com/Rotendahl/brainGames)\n\n## About the project\nThe project was a freelance job for the university of Copenhagen's School\nService. It was part of a larger campaign called \"Who controls your brain\",\nthe campaign was directed at middle school children with the purpose of teaching\nthem about their brains. These games were the digital part of the project and\ntasked them with various cognitive tasks.\n\n\n### The choice of framework\nThe kids were invited to a series of events where they would play them. We did\nnot expect them to be able to install apps on their phones (Parental controls\netc.) which meant that the games had to be web based.\nFrom my work in Coding Pirates I knew about [Processing](http://processingjs.org)\nwhich is a simple way to create interactive drawings.\nA quick look at the [documentation](http://processingjs.org/reference/) for\nprocessing reveals its main strength, the functions are few and basic enough\nthat the learning curve is almost nonexistent. As an example the following\nsnippet creates small circles in different colors based on the position of the\nmouse.\n\n```js\nsetup = function(){\n    size(400, 400);\n    framerate(30);\n};\n\nbackground(0, 0, 0);\n\ndraw = function() {\n    fill(mouseX, mouseY, 0);\n    ellipse(mouseX, mouseY, 50, 50);\n};\n```\n\nA programmer armed with the documentation can start building games at once and\nnot focus on lengthy tutorials. The downside of processing is that it's mainly\nmade for educational purposes and interactive art. This gave the following problems:\n\n* Touch events are not natively supported, procressing only supports mouse clicks\n  and can't handle multitouch. This was mitigated by using the position of the\n  _mouse_, for each frame the mouse position is reset so a change in position\n  indicates a click. This is\n\n* It's hard to get it to work in a responsive manner.\n\n* Processing was originally implemented in java and the port is not web first,\n  leading to bad errors.\n\n* It's Hard to interact with the DOM.\n\nA way to get around some of these problems is to use this excellent\n[extension](https://github.com/GildasP/jProcessingJS) which makes it responsive\nand mobile friendly.\n\n::: {.callout-note}\nSince I built my project the javascript version of processing has gotten a\nsuccessor [p5](https://p5js.org) which solves these problems.\n\n:::\n\n## The structure of a game\nEach game starts with a html file that loads the framework and the css required\nto make it responsive, lastly it loads _.pde_ files and creates a canvas\n\nThe next step is to load the images required using the preprocessing directive\n> `/* @pjs preload=\"image1.jpg\"; */`\n\nUsing these directives it's simple to create a loading screen and scale the\nimages once they are loaded. The `setup` and `draw` functions are placed in the\nfile _code.pde_ which controls the game's state and the core game logic. Each\ngame has a file _game.pde_ that contains the data structures and classes for each\ngame.\n\n\n### The memory game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/huske.png){height=500 fig-align=\"center\"}\n\nThis game task the player to remember an ever increasing sequence of tiles.\nIn the first level the user is shown three tiles numbered from one to three.\nAfter the timer runs out the numbers are hidden and the player must remember\ntheir order.\n\nThe game was made to show that we can \"trick\" our mind into remembering more\ninformation by storing it efficiently. First the kids had to check how they\nperformed when trying to remember the positions of each tile. Afterwards they\ninstead were told to remember the path and notice how their performance increased.\n\n\n#### Implementation\nThe game's logic starts with creating a grid of a `tile` class, which holds the\nposition and value for each tile, it exposes methods for hiding/showing and\ndrawing it self. The game randomly picks tiles corresponding to\n$levelNumber + 2$ ranks them from $[1,levelNumber]$ and draws them.\n\nThe state loop in _game.pde_ starts a timer and turns tiles when needed. When\nthe player loses they are given the option of posting their score or trying\nagain.\n\n\n\n### The \"tabel\" game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/tabel.png){height=500 fig-align=\"center\"}\n\nThis game presents the player with at table that keeps scrolling down, at the\nbottom of the screen is the current \"task\" for the bottom row. The task can be\npicking the sum of two numbers, picking a number $n$ such that\n$3 \\mid n$, etc. If the player fails a task the row goes red and one\nextra row will stay red for the rest of the game.\n\nThe goal of the game was to have the kids find a way of avoiding doing the actual\ncomputation and find a pattern that could solve the task, I.e $5 \\mid n$ can be\nsolved by finding a number that ends in 5 or 0.\n\n\n#### Implementation\nThe game creates 5 rows containing 6 instances of the tile class. The rows\nscroll down and when they hit the bottom of the screen they are moved to the\ntop again. When a row is \"reset\" the numbers on the tile are changed so they\ncontinue the sequence from the row nearest the top that isn't red. The non red\nrow closets to the bottom is the active one that the current task should be\nperformed on. If a task is completed the row turns blue and active row and\ncurrent task is changed.\n\n\n\n### The reaction game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/reaktion.png){height=600 fig-align=\"center\"}\n\nThis game tests the players reactions and ability to perform simple cognitive\ntasks. It was inspired by the [Batak board](http://www.batak.com)\n\nThe player has to hit a specified number of nodes in the graph, before the time\nruns out.\n\n","srcMarkdownNoYaml":"\n![](https://github.com/Rotendahl/brainGames/raw/master/screenshot.png)\n\n# Introduction\nThis post describes the implementation of three mobile-first web games created\nusing Processing, a simple tool for building interactive drawings. The games\nwere designed to be played on smartphones and were part of a larger campaign\ncalled \"Who Controls Your Brain,\" directed at middle school children to teach\nthem about the brain. The digital games were a part of this educational effort\nand tasked the children with various cognitive tasks. The project was paid for\nby the school service of the University of Copenhagen.\n\nThe games works best on smartphones and can be played here:\n[https://rotendahl.dk/brainGames/](https://rotendahl.dk/brainGames/) and\nthe code is on [github](https://github.com/Rotendahl/brainGames)\n\n## About the project\nThe project was a freelance job for the university of Copenhagen's School\nService. It was part of a larger campaign called \"Who controls your brain\",\nthe campaign was directed at middle school children with the purpose of teaching\nthem about their brains. These games were the digital part of the project and\ntasked them with various cognitive tasks.\n\n\n### The choice of framework\nThe kids were invited to a series of events where they would play them. We did\nnot expect them to be able to install apps on their phones (Parental controls\netc.) which meant that the games had to be web based.\nFrom my work in Coding Pirates I knew about [Processing](http://processingjs.org)\nwhich is a simple way to create interactive drawings.\nA quick look at the [documentation](http://processingjs.org/reference/) for\nprocessing reveals its main strength, the functions are few and basic enough\nthat the learning curve is almost nonexistent. As an example the following\nsnippet creates small circles in different colors based on the position of the\nmouse.\n\n```js\nsetup = function(){\n    size(400, 400);\n    framerate(30);\n};\n\nbackground(0, 0, 0);\n\ndraw = function() {\n    fill(mouseX, mouseY, 0);\n    ellipse(mouseX, mouseY, 50, 50);\n};\n```\n\nA programmer armed with the documentation can start building games at once and\nnot focus on lengthy tutorials. The downside of processing is that it's mainly\nmade for educational purposes and interactive art. This gave the following problems:\n\n* Touch events are not natively supported, procressing only supports mouse clicks\n  and can't handle multitouch. This was mitigated by using the position of the\n  _mouse_, for each frame the mouse position is reset so a change in position\n  indicates a click. This is\n\n* It's hard to get it to work in a responsive manner.\n\n* Processing was originally implemented in java and the port is not web first,\n  leading to bad errors.\n\n* It's Hard to interact with the DOM.\n\nA way to get around some of these problems is to use this excellent\n[extension](https://github.com/GildasP/jProcessingJS) which makes it responsive\nand mobile friendly.\n\n::: {.callout-note}\nSince I built my project the javascript version of processing has gotten a\nsuccessor [p5](https://p5js.org) which solves these problems.\n\n:::\n\n## The structure of a game\nEach game starts with a html file that loads the framework and the css required\nto make it responsive, lastly it loads _.pde_ files and creates a canvas\n\nThe next step is to load the images required using the preprocessing directive\n> `/* @pjs preload=\"image1.jpg\"; */`\n\nUsing these directives it's simple to create a loading screen and scale the\nimages once they are loaded. The `setup` and `draw` functions are placed in the\nfile _code.pde_ which controls the game's state and the core game logic. Each\ngame has a file _game.pde_ that contains the data structures and classes for each\ngame.\n\n\n### The memory game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/huske.png){height=500 fig-align=\"center\"}\n\nThis game task the player to remember an ever increasing sequence of tiles.\nIn the first level the user is shown three tiles numbered from one to three.\nAfter the timer runs out the numbers are hidden and the player must remember\ntheir order.\n\nThe game was made to show that we can \"trick\" our mind into remembering more\ninformation by storing it efficiently. First the kids had to check how they\nperformed when trying to remember the positions of each tile. Afterwards they\ninstead were told to remember the path and notice how their performance increased.\n\n\n#### Implementation\nThe game's logic starts with creating a grid of a `tile` class, which holds the\nposition and value for each tile, it exposes methods for hiding/showing and\ndrawing it self. The game randomly picks tiles corresponding to\n$levelNumber + 2$ ranks them from $[1,levelNumber]$ and draws them.\n\nThe state loop in _game.pde_ starts a timer and turns tiles when needed. When\nthe player loses they are given the option of posting their score or trying\nagain.\n\n\n\n### The \"tabel\" game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/tabel.png){height=500 fig-align=\"center\"}\n\nThis game presents the player with at table that keeps scrolling down, at the\nbottom of the screen is the current \"task\" for the bottom row. The task can be\npicking the sum of two numbers, picking a number $n$ such that\n$3 \\mid n$, etc. If the player fails a task the row goes red and one\nextra row will stay red for the rest of the game.\n\nThe goal of the game was to have the kids find a way of avoiding doing the actual\ncomputation and find a pattern that could solve the task, I.e $5 \\mid n$ can be\nsolved by finding a number that ends in 5 or 0.\n\n\n#### Implementation\nThe game creates 5 rows containing 6 instances of the tile class. The rows\nscroll down and when they hit the bottom of the screen they are moved to the\ntop again. When a row is \"reset\" the numbers on the tile are changed so they\ncontinue the sequence from the row nearest the top that isn't red. The non red\nrow closets to the bottom is the active one that the current task should be\nperformed on. If a task is completed the row turns blue and active row and\ncurrent task is changed.\n\n\n\n### The reaction game\n![](https://github.com/Rotendahl/brainGames/raw/master/assets/reaktion.png){height=600 fig-align=\"center\"}\n\nThis game tests the players reactions and ability to perform simple cognitive\ntasks. It was inspired by the [Batak board](http://www.batak.com)\n\nThe player has to hit a specified number of nodes in the graph, before the time\nruns out.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","resource-path":["../../assets"],"toc":true,"number-sections":true,"output-file":"games-with-processing.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","number-depth":3,"smooth-scroll":true,"theme":{"light":"litera","dark":"Cyborg"},"title-block-banner":true,"title":"Mobile first games in processing","author":"Benjamin Rotendahl","date":"2017-07-13","date-modified":"2023-04-12","categories":["front-end","code","games"],"image":"https://github.com/Rotendahl/brainGames/raw/master/screenshot.png","titlegraphic":"https://github.com/Rotendahl/brainGames/raw/master/screenshot.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}